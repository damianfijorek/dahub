{"version":3,"sources":["pages/UserDetailsPage/styles.module.css","store/actions.ts","store/reducer.ts","store/store.ts","services/Api.ts","components/UserCard.tsx","pages/UserDetailsPage/index.tsx","components/UsersList.tsx","pages/UsersPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ActionTypes","setPage","page","type","UsersPageChanged","setPageSize","pageSize","UsersPageSizeChanged","initialState","pagerState","store","createStore","state","action","isFailure","response","toFailure","e","data","message","Api","url","axios","get","users","items","links","parse","headers","pages","last","next","prev","parseInt","undefined","login","Text","Typography","Title","UsersComponent","user","cover","alt","src","avatarUrl","actions","to","icon","ArrowLeftOutlined","direction","name","location","EnvironmentTwoTone","email","MailTwoTone","Link","href","UserDetailsPage","withRouter","props","match","params","useState","loading","setState","useEffect","didCancel","a","getUser","result","id","avatar_url","className","styles","details","description","size","UserCard","UsersList","dataSource","renderItem","Item","Meta","avatar","title","empty","currentUsers","connect","appState","onPageSizeChange","useCallback","_","getUsers","error","map","r","responsive","current","onChange","pageSizeOptions","onShowSizeChange","total","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7208fb16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"details\":\"styles_details__ORXkU\"};","import { Action } from \"redux\";\r\n\r\nexport enum ActionTypes {\r\n  UsersPageChanged = \"UsersPageChanged\",\r\n  UsersPageSizeChanged = \"UsersPageSizeChanged\",\r\n}\r\n\r\nexport interface UsersPageChanged extends Action<ActionTypes> {\r\n  type: ActionTypes.UsersPageChanged;\r\n  page: number;\r\n}\r\n\r\nexport const setPage = (page: number): UsersPageChanged => ({\r\n  type: ActionTypes.UsersPageChanged,\r\n  page,\r\n});\r\n\r\nexport interface UsersPageSizeChanged extends Action<ActionTypes> {\r\n  type: ActionTypes.UsersPageSizeChanged;\r\n  pageSize: number;\r\n}\r\n\r\nexport const setPageSize = (pageSize: number): UsersPageSizeChanged => ({\r\n  type: ActionTypes.UsersPageSizeChanged,\r\n  pageSize,\r\n});\r\n\r\nexport type Actions = UsersPageChanged | UsersPageSizeChanged;\r\n","import { Reducer } from \"redux\";\r\nimport { Actions, ActionTypes } from \"./actions\";\r\nimport AppState from \"./state\";\r\n\r\nconst initialState: AppState = {\r\n  pagerState: { page: 1, pageSize: 10 },\r\n};\r\n\r\nexport const appReducer: Reducer<AppState, Actions> = (state = initialState, action: Actions): AppState => {\r\n  switch (action.type) {\r\n    case ActionTypes.UsersPageChanged:\r\n      return { ...state, pagerState: { ...state.pagerState, page: action.page } };\r\n    case ActionTypes.UsersPageSizeChanged:\r\n      return { ...state, pagerState: { page: 1, pageSize: action.pageSize } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from 'redux';\r\nimport AppState from './state';\r\nimport { Actions } from './actions';\r\nimport { appReducer } from './reducer';\r\n\r\nconst store = createStore<AppState, Actions, {}, {}>(appReducer);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport parse from \"parse-link-header\";\r\n\r\nexport interface Failure {\r\n  message: string;\r\n}\r\n\r\nexport function isFailure(response: any | Failure): response is Failure {\r\n  return response && \"message\" in response;\r\n}\r\n\r\nfunction toFailure(e: any) {\r\n  return isFailure(e?.response?.data) ? e.response.data : { message: \"Unknown error occured. Please try again.\" };\r\n}\r\n\r\ninterface UserResult {\r\n  id: number;\r\n  login: string;\r\n  avatar_url: string;\r\n}\r\n\r\ninterface Page {\r\n  page: number;\r\n  url: string;\r\n}\r\n\r\ninterface Pages {\r\n  next?: Page;\r\n  prev?: Page;\r\n  last?: Page;\r\n}\r\n\r\ninterface SearchUsersResult {\r\n  users: UserResult[];\r\n  pages: Pages;\r\n}\r\n\r\ninterface SearchUsersSuccessResponse {\r\n  items: UserResult[];\r\n}\r\n\r\ninterface UserDetailsResult extends UserResult {\r\n  name: string;\r\n  email: string;\r\n  location: string;\r\n}\r\n\r\nexport default abstract class Api {\r\n  public static async getUsers(page: number, pageSize: number): Promise<SearchUsersResult | Failure> {\r\n    try {\r\n      const url = `https://api.github.com/search/users?q=type:user&page=${page}&per_page=${pageSize}`;\r\n      const response = await axios.get<SearchUsersSuccessResponse>(url);\r\n      const users = response.data.items;\r\n      const links = parse(response.headers[\"link\"]);\r\n      if (!links)\r\n        return {\r\n          users,\r\n          pages: {\r\n            last: { page: 1, url },\r\n          },\r\n        };\r\n      const next = links[\"next\"];\r\n      const prev = links[\"prev\"];\r\n      const last = links[\"last\"];\r\n      return {\r\n        users,\r\n        pages: {\r\n          next: next ? { url: next.url, page: parseInt(next[\"page\"]) } : undefined,\r\n          prev: prev ? { url: prev.url, page: parseInt(prev[\"page\"]) } : undefined,\r\n          last: last ? { url: last.url, page: parseInt(last[\"page\"]) } : undefined,\r\n        },\r\n      };\r\n    } catch (e) {\r\n      return toFailure(e);\r\n    }\r\n  }\r\n\r\n  public static async getUser(login: string): Promise<UserDetailsResult | Failure> {\r\n    try {\r\n      return (await axios.get<UserDetailsResult>(`https://api.github.com/users/${login}`)).data;\r\n    } catch (e) {\r\n      return toFailure(e);\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card, Space, Typography } from \"antd\";\r\nimport { ArrowLeftOutlined, EnvironmentTwoTone, MailTwoTone } from \"@ant-design/icons\";\r\nimport { UserDetails } from \"../model/User\";\r\n\r\nconst { Text, Title } = Typography;\r\n\r\ninterface Props {\r\n  user: UserDetails;\r\n}\r\n\r\nconst UsersComponent = ({ user }: Props) => (\r\n  <Card\r\n    cover={<img alt=\"\" src={user.avatarUrl} />}\r\n    actions={[\r\n      <Link to=\"/\">\r\n        <Button type=\"primary\" icon={<ArrowLeftOutlined />}>\r\n            Back\r\n        </Button>\r\n      </Link>,\r\n    ]}\r\n  >\r\n    <Space direction=\"vertical\">\r\n      <Title>{user.name}</Title>\r\n      <Text type=\"secondary\">{user.login}</Text>\r\n      {user.location && (\r\n        <Text>\r\n          <EnvironmentTwoTone /> {user.location}\r\n        </Text>\r\n      )}\r\n      {user.email && (\r\n        <Text>\r\n          <MailTwoTone /> <Typography.Link href={`mailto:${user.email}`}>{user.email}</Typography.Link>\r\n        </Text>\r\n      )}\r\n    </Space>\r\n  </Card>\r\n);\r\n\r\nexport default UsersComponent;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\nimport { Empty, Spin } from \"antd\";\r\nimport Api, { Failure, isFailure } from \"../../services/Api\";\r\nimport { UserDetails } from \"../../model/User\";\r\nimport styles from \"./styles.module.css\";\r\nimport UserCard from \"../../components/UserCard\";\r\n\r\ninterface Loading {\r\n  loading: true;\r\n}\r\n\r\nconst Page = (props: RouteComponentProps<{ login: string }>) => {\r\n  const login = props.match.params.login;\r\n  const [state, setState] = useState<Loading | UserDetails | Failure>({ loading: true });\r\n\r\n  useEffect(() => {\r\n    let didCancel = false;\r\n\r\n    (async () => {\r\n      var result = await Api.getUser(login);\r\n      if (didCancel) return;\r\n      if (isFailure(result)) {\r\n        setState(result);\r\n      } else {\r\n        setState({\r\n          id: result.id,\r\n          login: result.login,\r\n          avatarUrl: result.avatar_url,\r\n          name: result.name,\r\n          email: result.email,\r\n          location: result.location,\r\n        });\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [login]);\r\n\r\n  return (\r\n    <div className={styles.details}>\r\n      {isFailure(state) ? (\r\n        <Empty  description={state.message} />\r\n      ) : \"loading\" in state ? (\r\n        <Spin size=\"large\" />\r\n      ) : (\r\n        <UserCard user={state} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserDetailsPage = withRouter(Page);\r\nexport default UserDetailsPage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { User } from \"../model/User\";\r\nimport { Avatar, List } from \"antd\";\r\n\r\ninterface Props {\r\n  users?: User[];\r\n}\r\n\r\nconst UsersList = ({ users }: Props) => (\r\n  <List\r\n    dataSource={users}\r\n    renderItem={(user) => (\r\n      <List.Item key={user.id}>\r\n        <Link to={`/user/${user.login}`}>\r\n          <List.Item.Meta avatar={<Avatar src={user.avatarUrl} />} title={user.login} />\r\n        </Link>\r\n      </List.Item>\r\n    )}\r\n  />\r\n);\r\n\r\nexport default UsersList;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { message, Pagination } from \"antd\";\r\nimport AppState from \"../store/state\";\r\nimport { setPage, setPageSize } from \"../store/actions\";\r\nimport Api, { isFailure } from \"../services/Api\";\r\nimport { User } from \"../model/User\";\r\nimport UsersList from \"../components/UsersList\";\r\n\r\ninterface State {\r\n  currentUsers: User[] | undefined;\r\n  pages: number;\r\n}\r\n\r\nconst mapStateToProps = (appState: AppState) => appState.pagerState;\r\n\r\nconst mapDispatchToProps = () => ({ setPage, setPageSize });\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst empty: State = { currentUsers: undefined, pages: 1 };\r\n\r\nconst UsersPage = (props: Props) => {\r\n  const [state, setState] = useState(empty);\r\n  const { page, setPage, pageSize, setPageSize } = props;\r\n\r\n  const onPageSizeChange = useCallback((_, pageSize) => setPageSize(pageSize), [setPageSize]);\r\n\r\n  useEffect(() => {\r\n    let didCancel = false;\r\n\r\n    (async () => {\r\n      var result = await Api.getUsers(page, pageSize);\r\n      if (didCancel) return;\r\n\r\n      if (isFailure(result)) {\r\n        message.error(result.message);\r\n        setState(empty);\r\n      } else {\r\n        setState({\r\n          currentUsers: result.users.map((r) => ({ id: r.id, login: r.login, avatarUrl: r.avatar_url })),\r\n          pages: result.pages.last?.page ?? page,\r\n        });\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      didCancel = true;\r\n    };\r\n  }, [page, pageSize]);\r\n\r\n  return (\r\n    <>\r\n      <h1>GitHub users</h1>\r\n      {state.currentUsers && (\r\n        <>\r\n          <UsersList users={state.currentUsers} />\r\n          <Pagination\r\n            responsive\r\n            size=\"small\"\r\n            current={page}\r\n            onChange={setPage}\r\n            pageSize={pageSize}\r\n            pageSizeOptions={[\"10\", \"20\", \"50\"]}\r\n            onShowSizeChange={onPageSizeChange}\r\n            total={state.pages * pageSize}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps())(UsersPage);\r\n","import React from \"react\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport store from \"./store/store\";\r\nimport UserDetailsPage from \"./pages/UserDetailsPage\";\r\nimport UsersPage from \"./pages/UsersPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n          <Route path=\"/\" exact>\r\n            <UsersPage />\r\n          </Route>\r\n          <Route path=\"/user/:login\" exact>\r\n            <UserDetailsPage />\r\n          </Route>\r\n        </HashRouter>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}